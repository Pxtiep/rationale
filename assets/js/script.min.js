!function(){function t(e,i,n){function r(a,o){if(!i[a]){if(!e[a]){var u="function"==typeof require&&require;if(!o&&u)return u(a,!0);if(s)return s(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=i[a]={exports:{}};e[a][0].call(c.exports,function(t){return r(e[a][1][t]||t)},c,c.exports,t,e,i,n)}return i[a].exports}for(var s="function"==typeof require&&require,a=0;a<n.length;a++)r(n[a]);return r}return t}()({1:[function(t,e,i){var n=t("./util.js"),r=t("./targetWidths.js"),s=function(){function t(t,e){if(this.el=t,this.settings=e||{},!this.el)return void console.warn("ImgixTag must be passed a DOM element.");if(!this.el.hasAttribute("ix-initialized")||this.settings.force){if(this.ixPathVal=t.getAttribute(this.settings.pathInputAttribute),this.ixParamsVal=t.getAttribute(this.settings.paramsInputAttribute),this.ixSrcVal=t.getAttribute(this.settings.srcInputAttribute),this.ixHostVal=t.getAttribute(this.settings.hostInputAttribute)||this.settings.host,this.ixPathVal&&!this.ixHostVal)return void console.warn("You must set a value for `imgix.config.host` or specify an `ix-host` attribute to use `ix-path` and `ix-params`.");if("string"==typeof this.ixPathVal&&0==this.ixPathVal.length)return void console.warn('`ix-path` cannot accept a value of empty string ""');if("string"==typeof this.ixSrcVal&&0==this.ixSrcVal.length)return void console.warn('`ix-src` cannot accept a value of empty string ""');this.baseParams=this._extractBaseParams(),this.baseUrl=this._buildBaseUrl(),this.baseUrlWithoutQuery=this.baseUrl.split("?")[0],n.isString(this.settings.sizesAttribute)&&this.el.setAttribute(this.settings.sizesAttribute,this.sizes()),n.isString(this.settings.srcsetAttribute)&&this.el.setAttribute(this.settings.srcsetAttribute,this.srcset()),n.isString(this.settings.srcAttribute)&&"IMG"==this.el.nodeName&&this.el.setAttribute(this.settings.srcAttribute,this.src()),this.el.setAttribute("ix-initialized","ix-initialized")}}return t.prototype._extractBaseParams=function(){var t={};if(this.settings.defaultParams&&"object"==typeof this.settings.defaultParams&&null!==this.settings.defaultParams&&(t=Object.assign({},this.settings.defaultParams)),this.ixPathVal){t=Object.assign({},t,JSON.parse(this.ixParamsVal)||{});for(var e in t)"64"===e.substr(-2)&&(t[e]=n.encode64(t[e]))}else{var i=this.ixSrcVal.lastIndexOf("?");if(i>-1)for(var r,s=this.ixSrcVal.substr(i+1),a=s.split("&"),o=0;o<a.length;o++)r=a[o].split("="),t[r[0]]=r[1]}return this.settings.includeLibraryParam&&(t.ixlib="imgixjs-"+imgix.VERSION),t},t.prototype._buildBaseUrl=function(){if(this.ixSrcVal)return this.ixSrcVal;var t=this.ixPathVal,e=this.settings.useHttps?"https":"http",i=e+"://"+this.ixHostVal,n="/"===this.ixHostVal.substr(-1),r="/"===t[0];i+=n&&r?t.substr(1):n||r?t:"/"+t,i+="?";var s,a=[];for(var o in this.baseParams)null!=(s=this.baseParams[o])&&a.push(encodeURIComponent(o)+"="+encodeURIComponent(s));return i+=a.join("&")},t.prototype._buildSrcsetPair=function(t){var e=n.shallowClone(this.baseParams);e.w=t,null!=this.baseParams.w&&null!=this.baseParams.h&&(e.h=Math.round(t*(this.baseParams.h/this.baseParams.w)));var i,r=this.baseUrlWithoutQuery+"?",s=[];for(var a in e)i=e[a],s.push(a+"="+i);return(r+=s.join("&"))+" "+t+"w"},t.prototype.src=function(){return this.baseUrl},t.prototype.srcset=function(){for(var t=[],e=0;e<r.length;e++)t.push(this._buildSrcsetPair(r[e]));return t.join(", ")},t.prototype.sizes=function(){var t=this.el.getAttribute("sizes");return t||"100vw"},t}();e.exports=s},{"./targetWidths.js":4,"./util.js":5}],2:[function(t,e,i){e.exports={host:null,useHttps:!0,includeLibraryParam:!0,defaultParams:{},srcAttribute:"src",srcsetAttribute:"srcset",sizesAttribute:"sizes",srcInputAttribute:"ix-src",pathInputAttribute:"ix-path",paramsInputAttribute:"ix-params",hostInputAttribute:"ix-host"}},{}],3:[function(t,e,i){(function(e){function i(t){var e,i=document.querySelector('meta[property="ix:'+t+'"]');if(i)return"true"===(e=i.getAttribute("content"))||"false"!==e&&(""===e||"null"===e?null:e)}var n=t("./ImgixTag.js"),r=t("./util.js"),s=t("./defaultConfig");e.imgix={init:function(t){var e=r.shallowClone(this.config);r.extend(e,t||{});for(var i=["img["+e.srcInputAttribute+"]","source["+e.srcInputAttribute+"]","img["+e.pathInputAttribute+"]","source["+e.pathInputAttribute+"]"].join(","),s=document.querySelectorAll(i),a=0;a<s.length;a++)new n(s[a],e)},config:s,VERSION:"3.4.2"},r.domReady(function(){r.objectEach(s,function(t,n){var r=i(n);if(void 0!==r){var a=typeof s[n];"boolean"===a?e.imgix.config[n]=!!r:"object"===a&&null!=s[n]?e.imgix.config[n]=JSON.parse(r)||{}:e.imgix.config[n]=r}}),!1!==i("autoInit")&&e.imgix.init()})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./ImgixTag.js":1,"./defaultConfig":2,"./util.js":5}],4:[function(t,e,i){e.exports=function(){for(var t=[],e=100;e<=8192;)t.push(function(t){return 2*Math.round(t/2)}(e)),e*=1.16;return t}()},{}],5:[function(t,e,i){e.exports={compact:function(t){for(var e=[],i=0;i<t.length;i++)t[i]&&e.push(t[i]);return e},shallowClone:function(t){var e={};for(var i in t)e[i]=t[i];return e},extend:function(t,e){for(var i in e)t[i]=e[i];return t},uniq:function(t){var e,i={},n=[];for(e=0;e<t.length;e++)i[t[e]]||(i[t[e]]=!0,n.push(t[e]));return n},objectEach:function(t,e){for(var i in t)t.hasOwnProperty(i)&&e(t[i],i)},isString:function(t){return"string"==typeof t},encode64:function(t){var e=unescape(encodeURIComponent(t)),i=btoa(e),n=i.replace(/\+/g,"-");return n=n.replace(/\//g,"_").replace(/\//g,"_").replace(/\=+$/,"")},decode64:function(t){var e=t.replace(/-/g,"+").replace(/_/g,"/"),i=atob(e);return decodeURIComponent(escape(i))},domReady:function(t){"complete"===document.readyState?setTimeout(t,0):document.addEventListener?document.addEventListener("DOMContentLoaded",t,!1):document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&t()})}}},{}]},{},[3]),function(t,e){var i=function(t,e){"use strict";if(e.getElementsByClassName){var i,n=e.documentElement,r=t.Date,s=t.HTMLPictureElement,a=t.addEventListener,o=t.setTimeout,u=t.requestAnimationFrame||o,l=t.requestIdleCallback,c=/^picture$/i,d=["load","error","lazyincluded","_lazyloaded"],f={},h=Array.prototype.forEach,p=function(t,e){return f[e]||(f[e]=new RegExp("(\\s|^)"+e+"(\\s|$)")),f[e].test(t.getAttribute("class")||"")&&f[e]},g=function(t,e){p(t,e)||t.setAttribute("class",(t.getAttribute("class")||"").trim()+" "+e)},m=function(t,e){var i;(i=p(t,e))&&t.setAttribute("class",(t.getAttribute("class")||"").replace(i," "))},v=function(t,e,i){var n=i?"addEventListener":"removeEventListener";i&&v(t,e),d.forEach(function(i){t[n](i,e)})},b=function(t,i,n,r,s){var a=e.createEvent("CustomEvent");return a.initCustomEvent(i,!r,!s,n||{}),t.dispatchEvent(a),a},y=function(e,n){var r;!s&&(r=t.picturefill||i.pf)?r({reevaluate:!0,elements:[e]}):n&&n.src&&(e.src=n.src)},A=function(t,e){return(getComputedStyle(t,null)||{})[e]},z=function(t,e,n){for(n=n||t.offsetWidth;n<i.minSize&&e&&!t._lazysizesWidth;)n=e.offsetWidth,e=e.parentNode;return n},x=function(){var t,i,n=[],r=[],s=n,a=function(){var e=s;for(s=n.length?r:n,t=!0,i=!1;e.length;)e.shift()();t=!1},l=function(n,r){t&&!r?n.apply(this,arguments):(s.push(n),i||(i=!0,(e.hidden?o:u)(a)))};return l._lsFlush=a,l}(),w=function(t,e){return e?function(){x(t)}:function(){var e=this,i=arguments;x(function(){t.apply(e,i)})}},E=function(t){var e,i=0,n=666,s=function(){e=!1,i=r.now(),t()},a=l?function(){l(s,{timeout:n}),666!==n&&(n=666)}:w(function(){o(s)},!0);return function(t){var s;(t=!0===t)&&(n=44),e||(e=!0,s=125-(r.now()-i),s<0&&(s=0),t||s<9&&l?a():o(a,s))}},C=function(t){var e,i,n=function(){e=null,t()},s=function(){var t=r.now()-i;t<99?o(s,99-t):(l||n)(n)};return function(){i=r.now(),e||(e=o(s,99))}},P=function(){var s,u,l,d,f,z,P,N,L,I,M,_,O,j,V,W=/^img$/i,R=/^iframe$/i,$="onscroll"in t&&!/glebot/.test(navigator.userAgent),B=0,T=0,k=-1,q=function(t){T--,t&&t.target&&v(t.target,q),(!t||T<0||!t.target)&&(T=0)},U=function(t,i){var r,s=t,a="hidden"==A(e.body,"visibility")||"hidden"!=A(t,"visibility");for(L-=i,_+=i,I-=i,M+=i;a&&(s=s.offsetParent)&&s!=e.body&&s!=n;)(a=(A(s,"opacity")||1)>0)&&"visible"!=A(s,"overflow")&&(r=s.getBoundingClientRect(),a=M>r.left&&I<r.right&&_>r.top-1&&L<r.bottom+1);return a},D=function(){var t,r,a,o,c,d,h,p,g;if((f=i.loadMode)&&T<8&&(t=s.length)){r=0,k++,null==j&&("expand"in i||(i.expand=n.clientHeight>500&&n.clientWidth>500?500:370),O=i.expand,j=O*i.expFactor),B<j&&T<1&&k>2&&f>2&&!e.hidden?(B=j,k=0):B=f>1&&k>1&&T<6?O:0;for(;r<t;r++)if(s[r]&&!s[r]._lazyRace)if($)if((p=s[r].getAttribute("data-expand"))&&(d=1*p)||(d=B),g!==d&&(P=innerWidth+d*V,N=innerHeight+d,h=-1*d,g=d),a=s[r].getBoundingClientRect(),(_=a.bottom)>=h&&(L=a.top)<=N&&(M=a.right)>=h*V&&(I=a.left)<=P&&(_||M||I||L)&&(l&&T<3&&!p&&(f<3||k<4)||U(s[r],d))){if(X(s[r]),c=!0,T>9)break}else!c&&l&&!o&&T<4&&k<4&&f>2&&(u[0]||i.preloadAfterLoad)&&(u[0]||!p&&(_||M||I||L||"auto"!=s[r].getAttribute(i.sizesAttr)))&&(o=u[0]||s[r]);else X(s[r]);o&&!c&&X(o)}},F=E(D),H=function(t){g(t.target,i.loadedClass),m(t.target,i.loadingClass),v(t.target,Q)},J=w(H),Q=function(t){J({target:t.target})},G=function(t,e){try{t.contentWindow.location.replace(e)}catch(i){t.src=e}},Y=function(t){var e,n,r=t.getAttribute(i.srcsetAttr);(e=i.customMedia[t.getAttribute("data-media")||t.getAttribute("media")])&&t.setAttribute("media",e),r&&t.setAttribute("srcset",r),e&&(n=t.parentNode,n.insertBefore(t.cloneNode(),t),n.removeChild(t))},K=w(function(t,e,n,r,s){var a,u,l,f,p,A;(p=b(t,"lazybeforeunveil",e)).defaultPrevented||(r&&(n?g(t,i.autosizesClass):t.setAttribute("sizes",r)),u=t.getAttribute(i.srcsetAttr),a=t.getAttribute(i.srcAttr),s&&(l=t.parentNode,f=l&&c.test(l.nodeName||"")),A=e.firesLoad||"src"in t&&(u||a||f),p={target:t},A&&(v(t,q,!0),clearTimeout(d),d=o(q,2500),g(t,i.loadingClass),v(t,Q,!0)),f&&h.call(l.getElementsByTagName("source"),Y),u?t.setAttribute("srcset",u):a&&!f&&(R.test(t.nodeName)?G(t,a):t.src=a),(u||f)&&y(t,{src:a})),t._lazyRace&&delete t._lazyRace,m(t,i.lazyClass),x(function(){(!A||t.complete&&t.naturalWidth>1)&&(A?q(p):T--,H(p))},!0)}),X=function(t){var e,n=W.test(t.nodeName),r=n&&(t.getAttribute(i.sizesAttr)||t.getAttribute("sizes")),s="auto"==r;(!s&&l||!n||!t.src&&!t.srcset||t.complete||p(t,i.errorClass))&&(e=b(t,"lazyunveilread").detail,s&&S.updateElem(t,!0,t.offsetWidth),t._lazyRace=!0,T++,K(t,e,s,r,n))},Z=function(){if(!l){if(r.now()-z<999)return void o(Z,999);var t=C(function(){i.loadMode=3,F()});l=!0,i.loadMode=3,F(),a("scroll",function(){3==i.loadMode&&(i.loadMode=2),t()},!0)}};return{_:function(){z=r.now(),s=e.getElementsByClassName(i.lazyClass),u=e.getElementsByClassName(i.lazyClass+" "+i.preloadClass),V=i.hFac,a("scroll",F,!0),a("resize",F,!0),t.MutationObserver?new MutationObserver(F).observe(n,{childList:!0,subtree:!0,attributes:!0}):(n.addEventListener("DOMNodeInserted",F,!0),n.addEventListener("DOMAttrModified",F,!0),setInterval(F,999)),a("hashchange",F,!0),["focus","mouseover","click","load","transitionend","animationend","webkitAnimationEnd"].forEach(function(t){e.addEventListener(t,F,!0)}),/d$|^c/.test(e.readyState)?Z():(a("load",Z),e.addEventListener("DOMContentLoaded",F),o(Z,2e4)),s.length?(D(),x._lsFlush()):F()},checkElems:F,unveil:X}}(),S=function(){var t,n=w(function(t,e,i,n){var r,s,a;if(t._lazysizesWidth=n,n+="px",t.setAttribute("sizes",n),c.test(e.nodeName||""))for(r=e.getElementsByTagName("source"),s=0,a=r.length;s<a;s++)r[s].setAttribute("sizes",n);i.detail.dataAttr||y(t,i.detail)}),r=function(t,e,i){var r,s=t.parentNode;s&&(i=z(t,s,i),r=b(t,"lazybeforesizes",{width:i,dataAttr:!!e}),r.defaultPrevented||(i=r.detail.width)&&i!==t._lazysizesWidth&&n(t,s,r,i))},s=function(){var e,i=t.length;if(i)for(e=0;e<i;e++)r(t[e])},o=C(s);return{_:function(){t=e.getElementsByClassName(i.autosizesClass),a("resize",o)},checkElems:o,updateElem:r}}(),N=function(){N.i||(N.i=!0,S._(),P._())};return function(){var e,n={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2};i=t.lazySizesConfig||t.lazysizesConfig||{};for(e in n)e in i||(i[e]=n[e]);t.lazySizesConfig=i,o(function(){i.init&&N()})}(),{cfg:i,autoSizer:S,loader:P,init:N,uP:y,aC:g,rC:m,hC:p,fire:b,gW:z,rAF:x}}}(t,t.document);t.lazySizes=i,"object"==typeof module&&module.exports&&(module.exports=i)}(window);var map={};if(onkeydown=onkeyup=function(t){map[t.keyCode]="keydown"==t.type},document.body.addEventListener("keyup",function(t){map[16]&&map[71]&&document.getElementsByTagName("HTML")[0].classList.toggle("gridShown"),map={}}),window.innerWidth>559){var posts=document.querySelectorAll(".feed-posts");[].forEach.call(posts,function(t,e){new Masonry(t,{itemSelector:".feed-post",columnWidth:".grid-sizer",percentPosition:!0,transitionDuration:0,horizontalOrder:!0})})}!function(){!function(t,e,i){i=i||window;var n=!1,r=function(){n||(n=!0,requestAnimationFrame(function(){i.dispatchEvent(new CustomEvent(e)),n=!1}))};i.addEventListener(t,r)}("resize","optimizedResize")}(),window.addEventListener("optimizedResize",function(){!posts&&window.innerWidth>559?(window.posts=document.querySelectorAll(".feed-posts"),[].forEach.call(posts,function(t,e){new Masonry(t,{itemSelector:".feed-post",columnWidth:".grid-sizer",percentPosition:!0,transitionDuration:0,horizontalOrder:!0})})):posts&&window.innerWidth<559&&([].forEach.call(posts,function(t,e){new Masonry(t,{itemSelector:".feed-post",columnWidth:".grid-sizer",percentPosition:!0,transitionDuration:0,horizontalOrder:!0}).destroy()}),window.posts=null)}),$(document).ready(function(){var t=$(".owl-carousel"),e=$(".gallery-thumbnail");t.owlCarousel({items:1,dots:!1}),$(".gallery-thumbnail").click(function(){var e=$(this).data("target")-1;t.trigger("to.owl.carousel",[e,300])}),$(".owl-carousel").click(function(e){t.trigger("next.owl.carousel",[300])}),t.on("changed.owl.carousel",function(t){$(".active").removeClass("active"),e.eq(t.item.index).addClass("active")}),t.on("translated.owl.carousel",function(t){lazyinstance.update()}),t.on("dragged.owl.carousel",function(t){lazyinstance.update()})}),$("a[href~='"+location.pathname+"']").addClass("current"),function(t){"use strict";t.picturefill=function(){for(var e=t.document.getElementsByTagName("span"),i=0,n=e.length;i<n;i++)if(null!==e[i].getAttribute("data-picture")){for(var r=e[i].getElementsByTagName("span"),s=[],a=0,o=r.length;a<o;a++){var u=r[a].getAttribute("data-media");(!u||t.matchMedia&&t.matchMedia(u).matches)&&s.push(r[a])}var l=e[i].getElementsByTagName("img")[0];if(s.length){var c=s.pop();if(l&&"NOSCRIPT"!==l.parentNode.nodeName){if(c===l.parentNode)continue}else l=t.document.createElement("img"),l.alt=e[i].getAttribute("data-alt");l.setAttribute("data-src",c.getAttribute("data-src")),c.appendChild(l),l.removeAttribute("width"),l.removeAttribute("height")}else l&&l.parentNode.removeChild(l)}},t.addEventListener?(t.addEventListener("resize",t.picturefill,!1),t.addEventListener("DOMContentLoaded",function(){t.picturefill(),t.removeEventListener("load",t.picturefill,!1)},!1),t.addEventListener("load",t.picturefill,!1)):t.attachEvent&&t.attachEvent("onload",t.picturefill)}(this),$(document).ready(function(){$(".js-more").click(function(){$(".more-short").css("display","none"),$(".more-full").css("display","block")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
